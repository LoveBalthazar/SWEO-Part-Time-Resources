
* {
  box-sizing: border-box;
}

body {
  background-color: lightgray;
}


.flex-container {
  background-color: white;
  width: 80%;
  margin: 50px;
  /* height: fit-content; */
  height: 700px;

 
  /* ----------CSS FLEX container properties---------- */
  /* --------default case when using flex - flex direction is row----------*/
  /* display: flex;
  flex-direction: row; 
  gap: 10px;
  justify-content: center;
  align-items: center; */

  /* -------------flex box with column direction-------- */
  /* when using direction column, our justify-content and align-items reverse roles */
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  gap: 10px;
}  

.flex-item {
  background-color: pink;
  border: 2px solid red;
  border-radius: 5px;
  padding: 20px;
  width: 90px;
  height: 80px;
  text-align: center;

  /* ----------CSS Flex item Properties-------- */

  /* flex-grow: as our container expands, when we apply flex-grow of 1, this flex item should also grow with the container (how much new space will be given to this flex item) */
  /* flex-grow's default is 0. */
  /* flex-grow: 1; */

  /* flex-shrink: as our container shrink in size, this flex item should also try to shrink as much space as possible  */
  /* flex-shrink default is 1; 0 means our flex items do not shrink! */
  /* flex-shrink: 0;  */


  /* flex-basis: what should our size be before applying flex-shrink anf flex-grow*/
  /* this flex item should be 10% of the container */
  /* flex-basis: 10%; */


}

.flex-item.two{
  width: 130px;
  height: 120px;
}

.flex-item.three{
  width: 150px;
  height: 150px;
}

.flex-item.four{
  width: 130px;
  height: 120px;
}